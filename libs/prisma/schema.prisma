generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model Artwork {
  id                  String     @id @default(cuid())
  name                String
  slug                String
  description         String
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  madeAt              DateTime?
  showInGallery       Boolean    @default(false)
  showInPortfolio     Boolean    @default(false)
  filename            String
  watermarkedFilename String?
  designState         String?
  categories          Category[]
  products            Product[]
}

model Category {
  id            String    @id @default(cuid())
  name          String
  slug          String
  description   String?
  disposition   Int
  updatedAt     DateTime  @updatedAt
  showInGallery Boolean   @default(false)
  artworks      Artwork[]
}

model ShopCategory {
  id               String         @id @default(cuid())
  updatedAt        DateTime       @updatedAt
  name             String
  slug             String
  disposition      Int
  parentCategory   ShopCategory?  @relation("shopCatSelfRelation", fields: [parentCategoryId], references: [id])
  subCategories    ShopCategory[] @relation("shopCatSelfRelation")
  parentCategoryId String?
  products         Product[]
}

model Product {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String
  slug           String
  description    String
  height         Int?
  width          Int?
  stock          Int
  price          Int
  forSale        Boolean        @default(false)
  artwork        Artwork        @relation(fields: [artworkId], references: [id])
  artworkId      String
  shopCategory   ShopCategory   @relation(fields: [shopCategoryId], references: [id])
  shopCategoryId String
  productImage   ProductImage[]
}

model ProductImage {
  id                  String  @id @default(cuid())
  showInGallery       Boolean @default(false)
  filename            String
  watermarkedFilename String?
  designState         String?
  product             Product @relation(fields: [productId], references: [id])
  productId           String
}

enum PURCHASE_STATUS {
  WAITING_FOR_PAYMENT
  IN_PREPARATION
  DELIVERING
  DELIVERED
  CANCELED
  REFUNDED
}

model Purchase {
  id             String          @id @default(uuid())
  stripeId       String
  purchaseAt     DateTime        @default(now())
  message        String?
  status         PURCHASE_STATUS
  trackingNumber String
  email          String
  weightCost     Int
  insuranceCost  Int
  addresses      Address[]
  purchaseItems  PurchaseItem[]
}

model PurchaseItem {
  id         String   @id @default(cuid())
  name       String
  quantity   Int
  price      Int
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String
}

enum ADDRESS_TYPE {
  SINGLE
  DELIVERY
  BILLING
}

model Address {
  id           String       @id @default(cuid())
  type         ADDRESS_TYPE
  fullname     String
  addressLine1 String
  addressLine2 String?
  postalCode   String
  city         String
  country      String
  phone        String?
  purchase     Purchase     @relation(fields: [purchaseId], references: [id])
  purchaseId   String
}

model ShippingCost {
  id            String @id @default(cuid())
  max           Int
  weightCost    Int
  insuranceCost Int
}

// ADMINISTRATION

enum VAR_KEY {
  CGV
}

model AdminVariable {
  id    String  @id @default(cuid())
  key   VAR_KEY
  value String
}
